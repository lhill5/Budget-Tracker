{"ast":null,"code":"var _jsxFileName = \"/Users/landon/Documents/VS Code/Web Dev/Budget Tracker/bt_frontend/frontend/src/components/LineChart.js\";\n// import React from \"react\";\n// import { Line } from \"react-chartjs-2\";\n// import styles from \"../styles/Chart.module.css\";\nimport { Chart, registerables } from \"chart.js\";\nChart.register(...registerables);\n\n// const dateToString = (date) => {\n//   var year = date.getFullYear();\n//   var month = date.getMonth() + 1;\n//   var date = date.getDate();\n//   var time = month + \"/\" + date + \"/\" + year;\n//   return time;\n// };\n\n// const getDatesBetween = (start_date, end_date) => {\n//   const date_arr = [];\n//   for (let i = start_date; i <= end_date; i.setDate(i.getDate() + 1)) {\n//     date_arr.push(dateToString(i));\n//   }\n//   return date_arr;\n// };\n\n// const getRandomData = (arr_len) => {\n//   let data_arr = [];\n\n//   data_arr.push(Math.random() * 100);\n//   for (let i = 1; i < arr_len; i++) {\n//     let sign = Math.round(Math.random()) === 0 ? 1 : -1;\n//     data_arr.push(data_arr[i - 1] + Math.random() * 100 * sign);\n//   }\n//   return data_arr;\n// };\n\n// const label_arr = [\n//   \"2022-01-01\",\n//   \"2022-02-01\",\n//   \"2022-03-01\",\n//   \"2022-04-01\",\n//   \"2022-05-01\",\n//   \"2022-06-01\",\n//   \"2022-07-01\",\n//   \"2022-08-01\",\n//   \"2022-09-01\",\n//   \"2022-10-01\",\n//   \"2022-11-01\",\n//   \"2022-12-01\",\n// ];\n\n// //getDatesBetween(new Date(2023, 0, 1), new Date(2023, 2, 3));\n// const data_arr = [12, 131, 15, 27, 10, 5, 31, 0, 9, 84, 88, 23];\n\n// //getRandomData(label_arr.length);\n\n// const data = {\n//   labels: label_arr,\n//   datasets: [\n//     {\n//       label: \"Net Worth Tracker\",\n//       backgroundColor: \"rgb(255, 99, 132)\",\n//       borderColor: \"rgb(255, 99, 132)\",\n//       data: data_arr,\n//     },\n//   ],\n// };\n\n// const options = {\n//   responsive: true,\n//   maintainAspectRatio: false,\n//   scales: {\n//     y: {\n//       // ticks: { color: \"white\" },\n//       beginAtZero: true,\n//     },\n//     x: {\n//       // ticks: { color: \"white\" },\n//       type: \"time\",\n//       time: {\n//         unit: \"month\",\n//         displayFormats: {\n//           month: \"MMM YYYY\",\n//         },\n//       },\n//     },\n//   },\n//   plugins: {\n//     legend: {\n//       display: false,\n//       // labels: {\n//       //   color: \"rgb(255, 99, 132)\",\n//       // },\n//       // position: \"right\",\n//       // align: \"center\",\n//     },\n//   },\n// };\n\n// const LineChart = () => {\n//   return (\n//     <div className={styles.nw_chart}>\n//       <Line options={options} data={data} />\n//     </div>\n//   );\n// };\n\n// export default LineChart;\n\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChart = () => {\n  const data = {\n    labels: [\"2022-01-01\", \"2022-01-02\", \"2022-01-03\", \"2022-01-04\", \"2022-01-05\", \"2022-01-06\", \"2022-01-07\", \"2022-01-08\", \"2022-01-09\", \"2022-01-10\"\n    // and so on, for all the days in the date range\n    ],\n\n    datasets: [{\n      label: \"Sales\",\n      data: [500, 450, 600, 700, 800, 900, 1200, 1300, 1100, 1000],\n      borderColor: \"rgb(255, 99, 132)\",\n      fill: false\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        type: \"time\",\n        time: {\n          unit: \"day\",\n          displayFormats: {\n            day: \"MMM D\"\n          }\n        }\n      },\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: data,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 10\n  }, this);\n};\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["Chart","registerables","register","React","Line","LineChart","data","labels","datasets","label","borderColor","fill","options","scales","x","type","time","unit","displayFormats","day","y","beginAtZero"],"sources":["/Users/landon/Documents/VS Code/Web Dev/Budget Tracker/bt_frontend/frontend/src/components/LineChart.js"],"sourcesContent":["// import React from \"react\";\n// import { Line } from \"react-chartjs-2\";\n// import styles from \"../styles/Chart.module.css\";\nimport { Chart, registerables } from \"chart.js\";\n\nChart.register(...registerables);\n\n// const dateToString = (date) => {\n//   var year = date.getFullYear();\n//   var month = date.getMonth() + 1;\n//   var date = date.getDate();\n//   var time = month + \"/\" + date + \"/\" + year;\n//   return time;\n// };\n\n// const getDatesBetween = (start_date, end_date) => {\n//   const date_arr = [];\n//   for (let i = start_date; i <= end_date; i.setDate(i.getDate() + 1)) {\n//     date_arr.push(dateToString(i));\n//   }\n//   return date_arr;\n// };\n\n// const getRandomData = (arr_len) => {\n//   let data_arr = [];\n\n//   data_arr.push(Math.random() * 100);\n//   for (let i = 1; i < arr_len; i++) {\n//     let sign = Math.round(Math.random()) === 0 ? 1 : -1;\n//     data_arr.push(data_arr[i - 1] + Math.random() * 100 * sign);\n//   }\n//   return data_arr;\n// };\n\n// const label_arr = [\n//   \"2022-01-01\",\n//   \"2022-02-01\",\n//   \"2022-03-01\",\n//   \"2022-04-01\",\n//   \"2022-05-01\",\n//   \"2022-06-01\",\n//   \"2022-07-01\",\n//   \"2022-08-01\",\n//   \"2022-09-01\",\n//   \"2022-10-01\",\n//   \"2022-11-01\",\n//   \"2022-12-01\",\n// ];\n\n// //getDatesBetween(new Date(2023, 0, 1), new Date(2023, 2, 3));\n// const data_arr = [12, 131, 15, 27, 10, 5, 31, 0, 9, 84, 88, 23];\n\n// //getRandomData(label_arr.length);\n\n// const data = {\n//   labels: label_arr,\n//   datasets: [\n//     {\n//       label: \"Net Worth Tracker\",\n//       backgroundColor: \"rgb(255, 99, 132)\",\n//       borderColor: \"rgb(255, 99, 132)\",\n//       data: data_arr,\n//     },\n//   ],\n// };\n\n// const options = {\n//   responsive: true,\n//   maintainAspectRatio: false,\n//   scales: {\n//     y: {\n//       // ticks: { color: \"white\" },\n//       beginAtZero: true,\n//     },\n//     x: {\n//       // ticks: { color: \"white\" },\n//       type: \"time\",\n//       time: {\n//         unit: \"month\",\n//         displayFormats: {\n//           month: \"MMM YYYY\",\n//         },\n//       },\n//     },\n//   },\n//   plugins: {\n//     legend: {\n//       display: false,\n//       // labels: {\n//       //   color: \"rgb(255, 99, 132)\",\n//       // },\n//       // position: \"right\",\n//       // align: \"center\",\n//     },\n//   },\n// };\n\n// const LineChart = () => {\n//   return (\n//     <div className={styles.nw_chart}>\n//       <Line options={options} data={data} />\n//     </div>\n//   );\n// };\n\n// export default LineChart;\n\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst LineChart = () => {\n  const data = {\n    labels: [\n      \"2022-01-01\",\n      \"2022-01-02\",\n      \"2022-01-03\",\n      \"2022-01-04\",\n      \"2022-01-05\",\n      \"2022-01-06\",\n      \"2022-01-07\",\n      \"2022-01-08\",\n      \"2022-01-09\",\n      \"2022-01-10\",\n      // and so on, for all the days in the date range\n    ],\n    datasets: [\n      {\n        label: \"Sales\",\n        data: [500, 450, 600, 700, 800, 900, 1200, 1300, 1100, 1000],\n        borderColor: \"rgb(255, 99, 132)\",\n        fill: false,\n      },\n    ],\n  };\n\n  const options = {\n    scales: {\n      x: {\n        type: \"time\",\n        time: {\n          unit: \"day\",\n          displayFormats: {\n            day: \"MMM D\",\n          },\n        },\n      },\n      y: {\n        beginAtZero: true,\n      },\n    },\n  };\n\n  return <Line data={data} options={options} />;\n};\n\nexport default LineChart;\n"],"mappings":";AAAA;AACA;AACA;AACA,SAASA,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAE/CD,KAAK,CAACE,QAAQ,CAAC,GAAGD,aAAa,CAAC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOE,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AAAC;AAEvC,MAAMC,SAAS,GAAG,MAAM;EACtB,MAAMC,IAAI,GAAG;IACXC,MAAM,EAAE,CACN,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ;IACA;IAAA,CACD;;IACDC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,OAAO;MACdH,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;MAC5DI,WAAW,EAAE,mBAAmB;MAChCC,IAAI,EAAE;IACR,CAAC;EAEL,CAAC;EAED,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,IAAI,EAAE,MAAM;QACZC,IAAI,EAAE;UACJC,IAAI,EAAE,KAAK;UACXC,cAAc,EAAE;YACdC,GAAG,EAAE;UACP;QACF;MACF,CAAC;MACDC,CAAC,EAAE;QACDC,WAAW,EAAE;MACf;IACF;EACF,CAAC;EAED,oBAAO,QAAC,IAAI;IAAC,IAAI,EAAEf,IAAK;IAAC,OAAO,EAAEM;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAG;AAC/C,CAAC;AAAC,KA3CIP,SAAS;AA6Cf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}